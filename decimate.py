'''
A simple function to decimate sac files
'''

import numpy as np

class FirFilter(object):
    ''' 
    FIR filter class
    '''
    
    def __init__(self,coeffs,even=False):
        '''
        Args: 
            * coeffs: numpy array including the first half of FIR coefficients
            * even: if True, use an even series of coefficients
        '''
        # Check coeffs
        if type(coeffs) == list:
            coeffs = np.array(coeffs)
        assert type(coeffs) is np.ndarray, 'coeffs must be an np.ndarray'

        # Length of the filter
        self.n2 = len(coeffs)
        self.n1 = self.n2 - 1
        N = self.n1 + self.n2
        if even:
            N += 1
            self.n1 += 1
    
        # FIR coefficients
        self.coeffs = np.zeros((N,),dtype='float32')
        self.coeffs[:self.n2] = coeffs.copy()
        anorm = 2* self.coeffs.sum()
        if not even:
            anorm -= self.coeffs[self.n2-1]
        self.coeffs /= anorm
        self.coeffs[self.n2:] = self.coeffs[self.n1-1::-1]

class ChannelSegment(object):
    '''
    Channel segment class
    '''
    
    def __init__(self,N,i=None,yi=None):
        '''
        Args:
            * N:  length of segment
            * yi: initial values for segment from i[0] to i[1]-1
            * i:  indices of yi in self.segment
        '''
        self.counter = 0
        self.segment = np.zeros((N,),dtype='float32')
        if (i is not None) and (yi is not None):
            self.segment[i[0]:i[1]] = yi[:i[1]-i[0]].copy()
    
    def push_back(self,sample_value=0.):
        '''
        Push back the channel segment by appending sample_value
        '''
        self.segment[:-1] = self.segment[1:]
        self.segment[-1]  = sample_value 
    
    def dot(self,y):
        '''
        Dot product with y
        '''
        self.counter = 0
        return self.segment.dot(y)



def decimate(yi, FIR, dec_fac):
    '''
    Decimate yi by dec_fac using FIR filter
    '''
    
    if dec_fac == 1:
        return yi

    # Length of filter
    N = FIR.n1 + FIR.n2
    n = len(yi)
    
    # Channel Segment
    chan = ChannelSegment(N,[FIR.n2,N],yi)

    # Main loop
    j = 0
    yo = []
    for i in range(FIR.n1,n+FIR.n1):
        if i<n:
            chan.push_back(yi[i])
        else:
            chan.push_back()
        if (chan.counter >= 0) and (chan.counter % dec_fac == 0):
            yo.append(chan.dot(FIR.coeffs))
            j += 1
        chan.counter += 1
    yo = np.array(yo)
    
    # All Done
    return yo


FACS = {120: [5,4,3,2],
        100: [5,5,4,1],
        90: [5,3,3,2],
        80: [5,4,4,1],
        75: [5,5,3,1],
        60: [5,4,3,1],
        50: [5,5,2,1],
        40: [5,4,2,1],
        30: [5,3,2,1],
        25: [5,5,1,1],
        20: [5,4,1,1],
        10: [5,2,1,1],
        5: [5,1,1,1],
        4: [4,1,1,1],
        3: [3,1,1,1],
        2: [2,1,1,1],
        1: [1,1,1,1]}


FIRDEC2 = [-3.3425764E-04, -3.3857070E-03, -1.9268941E-03,
           8.7774985E-04, 1.7113149E-03, -8.5958078E-04, -2.1123735E-03,
           6.8520368E-04, 2.6507233E-03, -3.3284827E-04, -3.2288394E-03,
           -2.1560673E-04, 3.7930536E-03, 9.7627493E-04, -4.2909257E-03,
           -1.9622259E-03, 4.6677405E-03, 3.1779352E-03, -4.8619559E-03,
           -4.6201788E-03, 4.8062914E-03, 6.2755287E-03, -4.4270223E-03,
           -8.1201386E-03, 3.6447931E-03, 1.0119658E-02, -2.3732848E-03,
           -1.2231107E-02, 5.1414071E-04, 1.4404192E-02, 2.0550210E-03,
           -1.6579267E-02, -5.4942630E-03, 1.8701682E-02, 1.0057281E-02,
           -2.0699021E-02, -1.6146368E-02, 2.2516267E-02, 2.4537170E-02,
           -2.4095145E-02, -3.6906341E-02, 2.5382959E-02, 5.7652390E-02,
           -2.6331840E-02, -1.0303353E-01, 2.6915017E-02, 3.1978511E-01,
           4.7732245E-01]

FIRDEC3 = [-0.57726190E-03, -0.27735722E-02, -0.15070150E-02,
           -0.79453795E-03, +0.60853921E-03, +0.12577202E-02, +0.71034848E-03,
           -0.58572053E-03, -0.14473109E-02, -0.10020733E-02, +0.47103246E-03,
           +0.16748102E-02, +0.14155055E-02, -0.23879687E-03, -0.18706999E-02,
           -0.19090844E-02, -0.12281968E-03, +0.19959896E-02, +0.24575219E-02,
           +0.62483293E-03, -0.20179669E-02, -0.30384576E-02, -0.12775299E-02,
           +0.18995546E-02, +0.36205212E-02, +0.20830208E-02, -0.16067328E-02,
           -0.41676573E-02, -0.30388678E-02, +0.11029486E-02, +0.46373457E-02,
           +0.41367821E-02, -0.35139307E-03, -0.49797446E-02, -0.53611984E-02,
           -0.68287796E-03, +0.51394254E-02, +0.66878777E-02, +0.20347144E-02,
           -0.50521158E-02, -0.80886949E-02, -0.37460821E-02, +0.46434188E-02,
           +0.95316246E-02, +0.58662295E-02, -0.38227537E-02, -0.10977356E-01,
           -0.84637869E-02, +0.24693119E-02, +0.12385793E-01, +0.11650560E-01,
           -0.41046151E-03, -0.13714714E-01, -0.15616039E-01, -0.26327996E-02,
           +0.14920589E-01, +0.20735700E-01, +0.71774079E-02, -0.15969098E-01,
           -0.27822647E-01, -0.14348116E-01, +0.16825307E-01, +0.38973324E-01,
           +0.27205415E-01, -0.17455403E-01, -0.61381415E-01, -0.57989098E-01,
           +0.17844718E-01, +0.14575759E+00, +0.26616585E+00, +0.31535816E+00]


FIRDEC4 = [-0.78610331E-03, 0.17703171E-02, 0.17342302E-02,
           0.17459453E-02, 0.13765346E-02, 0.60871453E-03,
           -0.29340666E-03, -0.94576413E-03, -0.10457698E-02,
           -0.54487761E-03, 0.30336727E-03, 0.10489000E-02,
           0.12694919E-02, 0.79965324E-03, -0.15881853E-03,
           -0.11173668E-02, -0.15448434E-02, -0.11566642E-02,
           -0.93354625E-04, 0.11186297E-02, 0.18238572E-02,
           0.15875453E-02, 0.45596727E-03, -0.10270840E-02,
           -0.20755990E-02, -0.20744186E-02, -0.93285192E-03,
           0.81899471E-03, 0.22699400E-02, 0.25965930E-02,
           0.15254335E-02, -0.47197170E-03, -0.23753699E-02,
           -0.31325626E-02, -0.22335923E-02, -0.36519799E-04,
           0.23592040E-02, 0.36549442E-02, 0.30510179E-02,
           0.72517502E-03, -0.21834560E-02, -0.41275406E-02,
           -0.39624022E-02, -0.16159373E-02, 0.18078703E-02,
           0.45121713E-02, 0.49573286E-02, 0.27206815E-02,
           -0.11885283E-02, -0.47603725E-02, -0.60094716E-02,
           -0.40607406E-02, 0.27697056E-03, 0.48204092E-02,
           0.70931828E-02, 0.56574643E-02, 0.98837493E-03,
           -0.46254322E-02, -0.81806388E-02, -0.75423168E-02,
           -0.26885252E-02, 0.40912377E-02, 0.92410743E-02,
           0.97706541E-02, 0.49446635E-02, -0.30995123E-02,
           -0.10243686E-01, -0.12446117E-01, -0.79624243E-02,
           0.14588218E-02, 0.11154728E-01, 0.15773855E-01,
           0.12122922E-01, 0.11730746E-02, -0.11949001E-01,
           -0.20213991E-01, -0.18260375E-01, -0.55519193E-02,
           0.12592813E-01, 0.26923735E-01, 0.28548554E-01,
           0.13739644E-01, -0.13070323E-01, -0.39812922E-01,
           -0.51046878E-01, -0.34419119E-01, 0.13365105E-01,
           0.83793312E-01, 0.15848082E+00, 0.21532360E+00,
           0.23653504E+00]
               
           

FIRDEC5 = [0.22739838E-02, 0.92948624E-03, 0.76842657E-03,
           0.36705163E-03, -0.19336015E-03, -0.77180623E-03,
           -0.12058818E-02, -0.13651208E-02, -0.11960072E-02,
           -0.74757589E-03, -0.16124418E-03, 0.36935217E-03,
           0.66196767E-03, 0.60708891E-03, 0.21137166E-03,
           -0.39880717E-03, -0.10119241E-02, -0.14018975E-02,
           -0.14061579E-02, -0.99059893E-03, -0.26810885E-03,
           0.53038984E-03, 0.11324680E-02, 0.13131760E-02,
           0.98129292E-03, 0.22151141E-03, -0.71785948E-03,
           -0.15157261E-02, -0.18772145E-02, -0.16343265E-02,
           -0.83641545E-03, 0.27951988E-03, 0.13379015E-02,
           0.19636080E-02, 0.19060248E-02, 0.11430616E-02,
           -0.10080911E-03, -0.14139037E-02, -0.23346422E-02,
           -0.25087805E-02, -0.18248872E-02, -0.46738447E-03,
           0.11268370E-02, 0.24096994E-02, 0.29073050E-02,
           0.23946902E-02, 0.98881521E-03, -0.86848100E-03,
           -0.25477768E-02, -0.34412947E-02, -0.31829374E-02,
           -0.17899896E-02, 0.31702407E-03, 0.24387422E-02,
           0.38236496E-02, 0.39369017E-02, 0.26567061E-02,
           0.34752686E-03, -0.22375220E-02, -0.42014252E-02,
           -0.48074462E-02, -0.37535410E-02, -0.13042900E-02,
           0.17638088E-02, 0.44051381E-02, 0.56554032E-02,
           0.49791960E-02, 0.24869707E-02, -0.10602982E-02,
           -0.44770911E-02, -0.65423511E-02, -0.64289104E-02,
           -0.40227529E-02, -0.14044337E-04, 0.42904904E-02,
           0.73840916E-02, 0.80774855E-02, 0.59415763E-02,
           0.15175294E-02, -0.38015433E-02, -0.81948247E-02,
           -0.10022298E-01, -0.84163100E-02, -0.36542960E-02,
           0.28455369E-02, 0.89212917E-02, 0.12363423E-01,
           0.11686970E-01, 0.67212107E-02, -0.12011472E-02,
           -0.95601920E-02, -0.15406003E-01, -0.16343743E-01,
           -0.11430031E-01, -0.16730814E-02, 0.10076012E-01,
           0.19867271E-01, 0.23857031E-01, 0.19629899E-01,
           0.72293030E-02, -0.10461548E-01, -0.28172743E-01,
           -0.39482988E-01, -0.38539425E-01, -0.21801252E-01,
           0.10695269E-01, 0.54943368E-01, 0.10361496E+00,
           0.14762825E+00, 0.17825589E+00, 0.18922436E+00]
